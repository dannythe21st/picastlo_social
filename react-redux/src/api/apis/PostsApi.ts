/* tslint:disable */
/* eslint-disable */
/**
 * Tutorial Management API
 * This API exposes endpoints to manage tutorials.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: myemail@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PostDTO,
  PostPaginationDTO,
} from '../models/index';
import {
    PostDTOFromJSON,
    PostDTOToJSON,
    PostPaginationDTOFromJSON,
    PostPaginationDTOToJSON,
} from '../models/index';

export interface DeletePostRequest {
    id: number;
}

export interface GetGroupFeedRequest {
    groupId: number;
    page: number;
    size: number;
}

export interface GetMyPostsRequest {
    page: number;
    size: number;
}

export interface GetPostRequest {
    id: number;
}

export interface GetPublicPostsRequest {
    page: number;
    size: number;
}

export interface GetUserFeedRequest {
    page: number;
    size: number;
}

export interface GetUserPostsRequest {
    username: string;
    page: number;
    size: number;
}

export interface PublishPostRequest {
    postDTO: PostDTO;
}

export interface UpdatePostRequest {
    id: number;
    postDTO: PostDTO;
}

/**
 * 
 */
export class PostsApi extends runtime.BaseAPI {

    /**
     * Delete a post
     */
    async deletePostRaw(requestParameters: DeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete a post
     */
    async deletePost(requestParameters: DeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get group posts
     */
    async getGroupFeedRaw(requestParameters: GetGroupFeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostPaginationDTO>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling getGroupFeed().'
            );
        }

        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling getGroupFeed().'
            );
        }

        if (requestParameters['size'] == null) {
            throw new runtime.RequiredError(
                'size',
                'Required parameter "size" was null or undefined when calling getGroupFeed().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostPaginationDTOFromJSON(jsonValue));
    }

    /**
     * Get group posts
     */
    async getGroupFeed(requestParameters: GetGroupFeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostPaginationDTO> {
        const response = await this.getGroupFeedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get my own posts
     */
    async getMyPostsRaw(requestParameters: GetMyPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostPaginationDTO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling getMyPosts().'
            );
        }

        if (requestParameters['size'] == null) {
            throw new runtime.RequiredError(
                'size',
                'Required parameter "size" was null or undefined when calling getMyPosts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostPaginationDTOFromJSON(jsonValue));
    }

    /**
     * Get my own posts
     */
    async getMyPosts(requestParameters: GetMyPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostPaginationDTO> {
        const response = await this.getMyPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a post by Id
     */
    async getPostRaw(requestParameters: GetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostDTOFromJSON(jsonValue));
    }

    /**
     * Get a post by Id
     */
    async getPost(requestParameters: GetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDTO> {
        const response = await this.getPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all public posts
     */
    async getPublicPostsRaw(requestParameters: GetPublicPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostPaginationDTO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling getPublicPosts().'
            );
        }

        if (requestParameters['size'] == null) {
            throw new runtime.RequiredError(
                'size',
                'Required parameter "size" was null or undefined when calling getPublicPosts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public-feed`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostPaginationDTOFromJSON(jsonValue));
    }

    /**
     * Get all public posts
     */
    async getPublicPosts(requestParameters: GetPublicPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostPaginationDTO> {
        const response = await this.getPublicPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a user feed
     */
    async getUserFeedRaw(requestParameters: GetUserFeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostPaginationDTO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling getUserFeed().'
            );
        }

        if (requestParameters['size'] == null) {
            throw new runtime.RequiredError(
                'size',
                'Required parameter "size" was null or undefined when calling getUserFeed().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/feed`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostPaginationDTOFromJSON(jsonValue));
    }

    /**
     * Get a user feed
     */
    async getUserFeed(requestParameters: GetUserFeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostPaginationDTO> {
        const response = await this.getUserFeedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a users posts
     */
    async getUserPostsRaw(requestParameters: GetUserPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostPaginationDTO>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling getUserPosts().'
            );
        }

        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling getUserPosts().'
            );
        }

        if (requestParameters['size'] == null) {
            throw new runtime.RequiredError(
                'size',
                'Required parameter "size" was null or undefined when calling getUserPosts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{username}/posts`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostPaginationDTOFromJSON(jsonValue));
    }

    /**
     * Get a users posts
     */
    async getUserPosts(requestParameters: GetUserPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostPaginationDTO> {
        const response = await this.getUserPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Publish a new post
     */
    async publishPostRaw(requestParameters: PublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDTO>> {
        if (requestParameters['postDTO'] == null) {
            throw new runtime.RequiredError(
                'postDTO',
                'Required parameter "postDTO" was null or undefined when calling publishPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/posts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostDTOToJSON(requestParameters['postDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostDTOFromJSON(jsonValue));
    }

    /**
     * Publish a new post
     */
    async publishPost(requestParameters: PublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDTO> {
        const response = await this.publishPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a post
     */
    async updatePostRaw(requestParameters: UpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePost().'
            );
        }

        if (requestParameters['postDTO'] == null) {
            throw new runtime.RequiredError(
                'postDTO',
                'Required parameter "postDTO" was null or undefined when calling updatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostDTOToJSON(requestParameters['postDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostDTOFromJSON(jsonValue));
    }

    /**
     * Update a post
     */
    async updatePost(requestParameters: UpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDTO> {
        const response = await this.updatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
