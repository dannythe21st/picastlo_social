/* tslint:disable */
/* eslint-disable */
/**
 * Tutorial Management API
 * This API exposes endpoints to manage tutorials.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: myemail@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ImageDTO,
} from '../models/index';
import {
    ImageDTOFromJSON,
    ImageDTOToJSON,
} from '../models/index';

export interface CreateImageRequest {
    file: Blob;
}

export interface CreateImageFromTextRequest {
    imageBase64: string;
}

export interface DeleteImageRequest {
    id: number;
}

export interface GetImageRequest {
    id: number;
}

export interface GetPublicImageRequest {
    id: number;
}

export interface GetUserImagesRequest {
    username: string;
}

/**
 * 
 */
export class ImagesApi extends runtime.BaseAPI {

    /**
     * Post an image
     */
    async createImageRaw(requestParameters: CreateImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageDTO>> {
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling createImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = true;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/images`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageDTOFromJSON(jsonValue));
    }

    /**
     * Post an image
     */
    async createImage(requestParameters: CreateImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageDTO> {
        const response = await this.createImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Post an Image from text
     */
    async createImageFromTextRaw(requestParameters: CreateImageFromTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageDTO>> {
        if (requestParameters['imageBase64'] == null) {
            throw new runtime.RequiredError(
                'imageBase64',
                'Required parameter "imageBase64" was null or undefined when calling createImageFromText().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = true;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['imageBase64'] != null) {
            formParams.append('imageBase64', requestParameters['imageBase64'] as any);
        }

        const response = await this.request({
            path: `/images/base64`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageDTOFromJSON(jsonValue));
    }

    /**
     * Post an Image from text
     */
    async createImageFromText(requestParameters: CreateImageFromTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageDTO> {
        const response = await this.createImageFromTextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an image
     */
    async deleteImageRaw(requestParameters: DeleteImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/images/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an image
     */
    async deleteImage(requestParameters: DeleteImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteImageRaw(requestParameters, initOverrides);
    }

    /**
     * Get an image by Id
     */
    async getImageRaw(requestParameters: GetImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/images/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageDTOFromJSON(jsonValue));
    }

    /**
     * Get an image by Id
     */
    async getImage(requestParameters: GetImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageDTO> {
        const response = await this.getImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an public image by Id - to unauthenticated users
     */
    async getPublicImageRaw(requestParameters: GetPublicImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPublicImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public-images/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageDTOFromJSON(jsonValue));
    }

    /**
     * Get an public image by Id - to unauthenticated users
     */
    async getPublicImage(requestParameters: GetPublicImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageDTO> {
        const response = await this.getPublicImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all the images posted by a user
     */
    async getUserImagesRaw(requestParameters: GetUserImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ImageDTO>>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling getUserImages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{username}/images`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ImageDTOFromJSON));
    }

    /**
     * Get all the images posted by a user
     */
    async getUserImages(requestParameters: GetUserImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ImageDTO>> {
        const response = await this.getUserImagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
