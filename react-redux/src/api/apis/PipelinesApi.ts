/* tslint:disable */
/* eslint-disable */
/**
 * Tutorial Management API
 * This API exposes endpoints to manage tutorials.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: myemail@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PipelineDTO,
} from '../models/index';
import {
    PipelineDTOFromJSON,
    PipelineDTOToJSON,
} from '../models/index';

export interface ChangePipelineVisibilityRequest {
    id: number;
    newVis: number;
}

export interface CreatePipelineRequest {
    description: string;
    name: string;
    id: number;
    transformations: string;
}

export interface GetPipelineRequest {
    id: number;
}

export interface GetPublicPipelineRequest {
    id: number;
}

export interface GetUserPipelinesRequest {
    username: string;
}

/**
 * 
 */
export class PipelinesApi extends runtime.BaseAPI {

    /**
     * Change pipeline visibility
     */
    async changePipelineVisibilityRaw(requestParameters: ChangePipelineVisibilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling changePipelineVisibility().'
            );
        }

        if (requestParameters['newVis'] == null) {
            throw new runtime.RequiredError(
                'newVis',
                'Required parameter "newVis" was null or undefined when calling changePipelineVisibility().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['newVis'] != null) {
            queryParameters['newVis'] = requestParameters['newVis'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineDTOFromJSON(jsonValue));
    }

    /**
     * Change pipeline visibility
     */
    async changePipelineVisibility(requestParameters: ChangePipelineVisibilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineDTO> {
        const response = await this.changePipelineVisibilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a pipeline
     */
    async createPipelineRaw(requestParameters: CreatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineDTO>> {
        if (requestParameters['description'] == null) {
            throw new runtime.RequiredError(
                'description',
                'Required parameter "description" was null or undefined when calling createPipeline().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling createPipeline().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling createPipeline().'
            );
        }

        if (requestParameters['transformations'] == null) {
            throw new runtime.RequiredError(
                'transformations',
                'Required parameter "transformations" was null or undefined when calling createPipeline().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = true;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['transformations'] != null) {
            formParams.append('transformations', requestParameters['transformations'] as any);
        }

        const response = await this.request({
            path: `/pipelines`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineDTOFromJSON(jsonValue));
    }

    /**
     * Create a pipeline
     */
    async createPipeline(requestParameters: CreatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineDTO> {
        const response = await this.createPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a pipeline by Id
     */
    async getPipelineRaw(requestParameters: GetPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPipeline().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pipelines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineDTOFromJSON(jsonValue));
    }

    /**
     * Get a pipeline by Id
     */
    async getPipeline(requestParameters: GetPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineDTO> {
        const response = await this.getPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a public pipeline - made for unauthorized users
     */
    async getPublicPipelineRaw(requestParameters: GetPublicPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPublicPipeline().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public-pipelines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineDTOFromJSON(jsonValue));
    }

    /**
     * Get a public pipeline - made for unauthorized users
     */
    async getPublicPipeline(requestParameters: GetPublicPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineDTO> {
        const response = await this.getPublicPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of pipelines from an user
     */
    async getUserPipelinesRaw(requestParameters: GetUserPipelinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PipelineDTO>>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling getUserPipelines().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{username}/pipelines`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PipelineDTOFromJSON));
    }

    /**
     * Get a list of pipelines from an user
     */
    async getUserPipelines(requestParameters: GetUserPipelinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PipelineDTO>> {
        const response = await this.getUserPipelinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
